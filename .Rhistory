# Multiplicacion Matriz por Vector usando mapreduce
# Tipo 1: el caso en que el vector v cabe dentro de la memoria RAM
MultMV_1.mr <- function( M, V) {
d <- values(from.dfs(V))
f <- function(x){return(x[3]*d[x[2],2])}
map <- function(.,m) {
i <- m[1]
m <- as.matrix(m)
valor <- apply(m,1,f)
valor <- as.data.frame(as.numeric(as.character(valor)))
return( keyval(i, valor) )
}
reduce <- function(i, xi) {
keyval(i, sum(xi))
}
calc <- mapreduce(input=M,
#output=output,
#input.format="text",
map=map,
reduce=reduce,
verbose = FALSE)
C = values( from.dfs( calc ) )
C
}
library(rhdfs)
setwd("C:/Users/Eric/Desktop/MapReduce/multiplicacion-matriz-vector-matriz-matriz-con-mapreduce-grupo-hej")
library(rmr2)
ignore <- rmr.options(backend="local") # Opciones "local" o "hadoop"
## Cargo la funciÃ³n de multiplicaciÃ³n de Matriz x Vector, Tipo 1
source("src/prod_Mv_type1.R")
x <- read.csv("data/tblxkv10.csv")
x
x = to.dfs(x)
from.dfs(x)
d <- 1:100
M <- matrix(1:100,ncol=10, byrow=TRUE)
M
v <- 1:10
v
w <- M %*% v
w <- M %*% v
w
w
A <- read.csv("data/tblAkv10x10.csv")
A
A
M
x
x
x <- read.csv("data/tblxkv10.csv")
x
x = to.dfs(x)
from.dfs(x)
d <- 1:100
M <- matrix(1:100,ncol=10, byrow=TRUE)
M
v <- 1:10
v
w <- M %*% v
w
A <- read.csv("data/tblAkv10x10.csv")
A
A <- to.dfs(A)
from.dfs(A)
y <- MultMV_1.mr(A,x)
y
y
## Prueba de la funciÃ³n
M <- matrix(1:9,ncol=3, byrow=TRUE)
M
v <- 1:3
v
w <- M %*% v
w
A <- read.csv("data/tblAkv3x3.csv")
A
A <- to.dfs(A)
from.dfs(A)
x <- read.csv("data/tblxkv3.csv")
x
x = to.dfs(x)
from.dfs(x)
y <- MultMV_1.mr(A,x)
y
M <- diag(10)
M
v <- 1:10
v
w <- M %*% v
w
A <- read.csv("data/tblAkv10x10ident.csv")
A
A <- to.dfs(A)
from.dfs(A)
x <- read.csv("data/tblxkv10.csv")
x
x = to.dfs(x)
from.dfs(x)
y <- MultMV_1.mr(A,x)
y
